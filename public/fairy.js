/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { useLoader, useFrame } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'

export default function Model(props) {
  const group = useRef()
  const { nodes, materials, animations } = useLoader(GLTFLoader, '/funnyFairy.glb')

  const actions = useRef()
  const [mixer] = useState(() => new THREE.AnimationMixer())
  useFrame((state, delta) => mixer.update(delta))
  useEffect(() => {
    actions.current = {
      handAction: mixer.clipAction(animations[0], group.current),
      FlapAction: mixer.clipAction(animations[1], group.current)
    }
    return () => animations.forEach(clip => mixer.uncacheClip(clip))
  }, [])

  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[0, 0.91, 0.05]}>
        <primitive object={nodes.WingsBase} />
        <skinnedMesh
          material={materials.fairyWingMat}
          geometry={nodes.wings.geometry}
          skeleton={nodes.wings.skeleton}
        />
      </group>
      <mesh material={materials.fairyMat} geometry={nodes.fairy.geometry} position={[0, 0.91, 0.05]} />
      <mesh
        material={materials.fairyWingMat}
        geometry={nodes.hand.geometry}
        position={[-0.88, 0.64, 0.52]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}>
        <mesh
          material={materials.fairyMat}
          geometry={nodes.star.geometry}
          position={[-1.32, 0, -1.69]}
          rotation={[-Math.PI / 2, -Math.PI / 2, 0]}
        />
      </mesh>
    </group>
  )
}
